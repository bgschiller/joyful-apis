(function(s){function a(a){for(var p,e,t=a[0],r=a[1],o=a[2],x=0,d=[];x<t.length;x++)e=t[x],l[e]&&d.push(l[e][0]),l[e]=0;for(p in r)Object.prototype.hasOwnProperty.call(r,p)&&(s[p]=r[p]);i&&i(a);while(d.length)d.shift()();return c.push.apply(c,o||[]),n()}function n(){for(var s,a=0;a<c.length;a++){for(var n=c[a],p=!0,t=1;t<n.length;t++){var r=n[t];0!==l[r]&&(p=!1)}p&&(c.splice(a--,1),s=e(e.s=n[0]))}return s}var p={},l={app:0},c=[];function e(a){if(p[a])return p[a].exports;var n=p[a]={i:a,l:!1,exports:{}};return s[a].call(n.exports,n,n.exports,e),n.l=!0,n.exports}e.m=s,e.c=p,e.d=function(s,a,n){e.o(s,a)||Object.defineProperty(s,a,{enumerable:!0,get:n})},e.r=function(s){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(s,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(s,"__esModule",{value:!0})},e.t=function(s,a){if(1&a&&(s=e(s)),8&a)return s;if(4&a&&"object"===typeof s&&s&&s.__esModule)return s;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:s}),2&a&&"string"!=typeof s)for(var p in s)e.d(n,p,function(a){return s[a]}.bind(null,p));return n},e.n=function(s){var a=s&&s.__esModule?function(){return s["default"]}:function(){return s};return e.d(a,"a",a),a},e.o=function(s,a){return Object.prototype.hasOwnProperty.call(s,a)},e.p="/lets-build-oauth/";var t=window["webpackJsonp"]=window["webpackJsonp"]||[],r=t.push.bind(t);t.push=a,t=t.slice();for(var o=0;o<t.length;o++)a(t[o]);var i=r;c.push([0,"chunk-vendors"]),n()})({0:function(s,a,n){s.exports=n("56d7")},"045a":function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">s3</span><span class="p">.</span><span class="nx">createMultipartUpload</span><span class="p">({</span>\n  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n  <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n<span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">uploadId</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">UploadId</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">partNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">ended</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>\n  <span class="kr">const</span> <span class="nx">parts</span> <span class="o">=</span> <span class="p">[];</span>\n  <span class="kd">let</span> <span class="nx">chunkSoFar</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>\n  <span class="kd">function</span> <span class="nx">maybeCompleteUpload</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">ended</span> <span class="o">&amp;&amp;</span> <span class="nx">parts</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">p</span> <span class="p">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">ETag</span><span class="p">))</span> <span class="p">{</span>\n      <span class="nx">s3</span><span class="p">.</span><span class="nx">completeMultipartUpload</span><span class="p">({</span>\n          <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n          <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n          <span class="nx">MultipartUpload</span><span class="o">:</span> <span class="p">{</span>\n            <span class="nx">Parts</span><span class="o">:</span> <span class="nx">parts</span><span class="p">,</span>\n          <span class="p">},</span>\n          <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n        <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="c1">// finally it&#39;s ended...</span>\n      <span class="p">});</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="kd">function</span> <span class="nx">appendPart</span><span class="p">(</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">partNumber</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// save this off, as it might have changed before</span>\n    <span class="c1">// the response from the upload</span>\n    <span class="kr">const</span> <span class="nx">part</span> <span class="o">=</span> <span class="p">{</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">partNumber</span><span class="p">,</span>\n      <span class="nx">ETag</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="c1">// not yet known</span>\n    <span class="p">};</span>\n    <span class="c1">// we must append now, as there&#39;s no guarantee</span>\n    <span class="c1">// the uploadPart responses will arrive in order.</span>\n    <span class="c1">// we&#39;ll keep a reference to &#39;part&#39; to fill in the</span>\n    <span class="c1">// ETag later.</span>\n    <span class="nx">parts</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">part</span><span class="p">);</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">uploadPart</span><span class="p">({</span>\n      <span class="nx">Body</span><span class="o">:</span> <span class="nx">payload</span><span class="p">,</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">part</span><span class="p">.</span><span class="nx">partNumber</span><span class="p">,</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// todo, handle errors by</span>\n        <span class="c1">// calling abortMultipartUpload</span>\n      <span class="p">}</span>\n      <span class="c1">// &#39;part&#39; is already in the array</span>\n      <span class="c1">// but we have a reference to it, so we can</span>\n      <span class="c1">// update with the ETag now that we know it.</span>\n      <span class="nx">part</span><span class="p">.</span><span class="nx">ETag</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">ETag</span><span class="p">;</span>\n      <span class="nx">maybeCompleteUpload</span><span class="p">();</span>\n    <span class="p">});</span>\n  <span class="p">}</span>\n\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">chunkSoFar</span> <span class="o">+=</span> <span class="nx">chunk</span><span class="p">;</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">chunkSoFar</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">FIVE_MB_IN_BYTES</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">appendPart</span><span class="p">(</span><span class="nx">chunkSoFar</span><span class="p">,</span> <span class="nx">partNumber</span><span class="p">);</span>\n      <span class="nx">chunkSoFar</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>\n      <span class="nx">partNumber</span><span class="o">++</span><span class="p">;</span>\n    <span class="p">}</span>\n  <span class="p">});</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">ended</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">chunkSoFar</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">appendPart</span><span class="p">(</span><span class="nx">chunkSoFar</span><span class="p">,</span> <span class="nx">partNumber</span><span class="p">);</span>\n    <span class="p">}</span>\n    <span class="nx">maybeCompleteUpload</span><span class="p">();</span>\n  <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'},"1bf6":function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">await</span> <span class="nx">s3</span><span class="p">.</span><span class="nx">putObject</span><span class="p">({</span>\n  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n  <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n  <span class="c1">// forward the body of the request</span>\n  <span class="c1">// straight to s3</span>\n  <span class="nx">Body</span><span class="o">:</span> <span class="nx">req</span><span class="p">,</span>\n<span class="p">});</span>\n</pre></div>\n'},"235b":function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">s3</span><span class="p">.</span><span class="nx">createMultipartUpload</span><span class="p">({</span>\n  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n  <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n<span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">uploadId</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">UploadId</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">partNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">ended</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>\n  <span class="kr">const</span> <span class="nx">parts</span> <span class="o">=</span> <span class="p">[];</span>\n  <span class="kd">function</span> <span class="nx">maybeEndUpload</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">ended</span> <span class="o">&amp;&amp;</span> <span class="nx">parts</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">p</span> <span class="p">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">ETag</span><span class="p">))</span> <span class="p">{</span>\n      <span class="nx">s3</span><span class="p">.</span><span class="nx">completeMultipartUpload</span><span class="p">({</span>\n          <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n          <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n          <span class="nx">MultipartUpload</span><span class="o">:</span> <span class="p">{</span>\n            <span class="nx">Parts</span><span class="o">:</span> <span class="nx">parts</span><span class="p">,</span>\n          <span class="p">},</span>\n          <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n        <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="c1">// finally it&#39;s ended...</span>\n      <span class="p">});</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="c1">// save this off, as it might have changed before</span>\n    <span class="c1">// the response from the upload</span>\n    <span class="kr">const</span> <span class="nx">part</span> <span class="o">=</span> <span class="p">{</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">partNumber</span><span class="p">,</span>\n      <span class="nx">ETag</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="c1">// not yet known</span>\n    <span class="p">};</span>\n    <span class="c1">// we must append now, as there&#39;s no guarantee</span>\n    <span class="c1">// the uploadPart responses will arrive in order.</span>\n    <span class="c1">// we&#39;ll keep a reference to &#39;part&#39; to fill in the</span>\n    <span class="c1">// ETag later.</span>\n    <span class="nx">parts</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">part</span><span class="p">);</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">uploadPart</span><span class="p">({</span>\n      <span class="nx">Body</span><span class="o">:</span> <span class="nx">chunk</span><span class="p">,</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">fixedPartNum</span><span class="p">,</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// todo, handle errors by</span>\n        <span class="c1">// calling abortMultipartUpload</span>\n      <span class="p">}</span>\n      <span class="c1">// &#39;part&#39; is already in the array</span>\n      <span class="c1">// but we have a reference to it, so we can</span>\n      <span class="c1">// update with the ETag now that we know it.</span>\n      <span class="nx">part</span><span class="p">.</span><span class="nx">ETag</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">ETag</span><span class="p">;</span>\n      <span class="nx">maybeEndUpload</span><span class="p">();</span>\n    <span class="p">});</span>\n  <span class="p">});</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">ended</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>\n    <span class="nx">maybeEndUpload</span><span class="p">();</span>\n  <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'},2856:function(s,a,n){},3831:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">s3</span><span class="p">.</span><span class="nx">createMultipartUpload</span><span class="p">({</span>\n  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n  <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n<span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">uploadId</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">UploadId</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">partNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">parts</span> <span class="o">=</span> <span class="p">[];</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="c1">// save this off, as it might have changed before</span>\n    <span class="c1">// the response from the upload</span>\n    <span class="kr">const</span> <span class="nx">part</span> <span class="o">=</span> <span class="p">{</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">partNumber</span><span class="p">,</span>\n      <span class="nx">ETag</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="c1">// not yet known</span>\n    <span class="p">};</span>\n    <span class="c1">// we must append now, as there&#39;s no guarantee</span>\n    <span class="c1">// the uploadPart responses will arrive in order.</span>\n    <span class="c1">// we&#39;ll keep a reference to &#39;part&#39; to fill in the</span>\n    <span class="c1">// ETag later.</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">uploadPart</span><span class="p">({</span>\n      <span class="nx">Body</span><span class="o">:</span> <span class="nx">chunk</span><span class="p">,</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">fixedPartNum</span><span class="p">,</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// todo, handle errors by</span>\n        <span class="c1">// calling abortMultipartUpload</span>\n      <span class="p">}</span>\n      <span class="c1">// &#39;part&#39; is already in the array</span>\n      <span class="c1">// but we have a reference to it, so we can</span>\n      <span class="c1">// update with the ETag now that we know it.</span>\n      <span class="nx">part</span><span class="p">.</span><span class="nx">ETag</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">ETag</span><span class="p">;</span>\n    <span class="p">});</span>\n    <span class="nx">partNumber</span><span class="o">++</span><span class="p">;</span>\n  <span class="p">});</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">completeMultipartUpload</span><span class="p">({</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">MultipartUpload</span><span class="o">:</span> <span class="p">{</span>\n        <span class="nx">Parts</span><span class="o">:</span> <span class="nx">parts</span><span class="p">,</span>\n      <span class="p">},</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="c1">// finally it&#39;s ended...</span>\n    <span class="p">});</span>\n  <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'},"56d7":function(s,a,n){"use strict";n.r(a);n("cadf"),n("551c"),n("097d");var p=n("2b0e"),l=n("d973"),c=(n("b159"),n("b960")),e=n.n(c),t=n("a70e"),r=n.n(t),o=n("4dd1"),i=n.n(o),x=function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("div",{attrs:{id:"app"}},[n("div",{staticClass:"eg-slideshow"},[n("slide",[s.isParent?n("span",{staticClass:"small"},[s._v("\n        (~10 months ago, amazon s3 upload from express)\n      ")]):s._e()]),n("slide",[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.s3Idealized)}})]),n("slide",[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.s3Callback)}})]),n("slide",[n("div",{staticClass:"vertical-center smaller-03",domProps:{innerHTML:s._s(s.s3Multipart)}})]),n("slide",[n("div",{staticClass:"vertical-center smaller-04",domProps:{innerHTML:s._s(s.s3SavePartNum)}})]),n("slide",[n("div",{staticClass:"vertical-center smaller-05",domProps:{innerHTML:s._s(s.s3OrderedParts)}})]),n("slide",[n("div",{staticClass:"vertical-center smaller-06",domProps:{innerHTML:s._s(s.s3EndStream)}})]),n("slide",[n("div",{staticClass:"vertical-center smaller-07",domProps:{innerHTML:s._s(s.s3FiveMb)}})]),n("slide",[n("div",{staticClass:"vertical-center smaller-08",domProps:{innerHTML:s._s(s.s3AbortOnError)}})]),n("slide",[n("h2",[s._v("Joyful APIs")]),n("ul",{staticClass:"unbulleted center-list left-align"},[n("li",[s._v("Brian Schiller")]),n("li",[s._v("@bgschiller")]),n("li",[s._v("brianschiller.com")]),n("li",[s._v("devetry.com")])])]),n("slide",{staticClass:"title-only"},[n("h2",[s._v("Orient around use, not internals")])]),n("slide",[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.pyUrllib2)}})]),n("slide",[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.pyRequests)}}),n("div",{staticClass:"credit"},[n("a",{attrs:{href:"https://gist.github.com/kennethreitz/973705"}},[s._v("\n          https://gist.github.com/kennethreitz/973705\n        ")])])]),n("slide",{staticClass:"title-only"},[n("h2",[s._v("Move complexity downard")])]),n("slide",[s._v("\n      imperative DOM manipulation vs Virtual DOM. (maybe Sarah Drasner jQuery vs Vue)\n      (maybe https://bl.ocks.org/mbostock/3808234)\n    ")]),n("slide",[n("div",{staticClass:"blockquote"},[s._v("\n        Something inevitably has to put shit in the DOM. -David Cushman\n      ")])]),n("slide",{staticClass:"title-only"},[n("h2",[s._v("Suffer for your API")])]),n("slide",[s._v("\n      https://github.com/jwt-dotnet/jwt#parsing-decoding-and-verifying-token\n    ")]),n("slide",{attrs:{steps:2}},[n("div",{staticClass:"by-halves"},[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.s3IdealizedInner)}}),n("div",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=2,expression:"step >= 2"}],staticClass:"vertical-center smaller-08",domProps:{innerHTML:s._s(s.s3AbortOnError)}})])]),n("slide",{attrs:{steps:4}},[n("h2",[s._v("In Amazon's defense...")]),n("ul",{staticClass:"center-list larger"},[n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=2,expression:"step>=2"}]},[s._v("fault-tolerant")]),n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=3,expression:"step>=3"}]},[s._v("parallelizable")]),n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=4,expression:"step>=4"}]},[s._v("direct map to HTTP")])])]),n("slide",{staticClass:"title-only"},[n("h2",[s._v("On the other hand...")])]),n("slide",[n("div",{staticClass:"img-contain",staticStyle:{"background-image":"url(/images/i_dont_care.jpg)"}})]),n("slide",{attrs:{steps:10}},[s.step>=9?n("h2",{staticClass:"floating-header"},[s._v("\n        Joyful API Design\n      ")]):s._e(),n("div",{staticClass:"by-halves"},[n("ul",{staticClass:"left-align unbulleted"},[n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=2,expression:"step >= 2"}],class:{stricken:s.step>=6}},[s._v("Organized according to how it works")]),n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=3,expression:"step >= 3"}],class:{stricken:s.step>=7}},[s._v("Left all the complexity")]),n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=4,expression:"step >= 4"}],class:{stricken:s.step>=8}},[s._v("Roll-your-own error handling")])]),s.step<=4?n("div",{staticClass:"vertical-center smaller-08",domProps:{innerHTML:s._s(s.s3AbortOnError)}}):s._e(),s.step>=5?n("ul",{staticClass:"left-align unbulleted"},[n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=6,expression:"step >= 6"}]},[s._v("Orient around use, not internals")]),n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=7,expression:"step >= 7"}]},[s._v("Move complexity downward")]),n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=8,expression:"step >= 8"}]},[s._v("Suffer for your API")])]):s._e()]),s.step>=10?n("h2",{staticClass:"floating-header bottom-header"},[s._v("\n        Empathy\n      ")]):s._e()])],1)])},d=[],u=n("a15a"),h=n.n(u),b=n("d2b1"),m=n.n(b),v=n("98b5"),f=n.n(v),g=n("7a8a"),k=n.n(g),y=n("3831"),w=n.n(y),_=n("235b"),P=n.n(_),N=n("045a"),U=n.n(N),I=n("f1e3"),M=n.n(I),T=n("1bf6"),E=n.n(T),C=n("63b8"),B=n.n(C),S=n("9148"),q=n.n(S),O={name:"app",mixins:[l["b"].slideshow],data:function(){return{s3Idealized:h.a,s3Callback:m.a,s3Multipart:f.a,s3SavePartNum:k.a,s3OrderedParts:w.a,s3EndStream:P.a,s3FiveMb:U.a,s3AbortOnError:M.a,s3IdealizedInner:E.a,pyRequests:q.a,pyUrllib2:B.a}}},K=O,j=(n("5c0b"),n("2877")),F=Object(j["a"])(K,x,d,!1,null,null,null);F.options.__file="App.vue";var H=F.exports;r.a.registerLanguage("javascript",i.a),l["a"].hljs=r.a,p["a"].config.productionTip=!1,l["b"].slideshow.computed.isChild=function(){return!!this.parentWindow},l["b"].slideshow.computed.isParent=function(){return!!this.childWindow},p["a"].use(l["b"]),p["a"].use(e.a),new p["a"]({render:function(s){return s(H)}}).$mount("#app")},"5c0b":function(s,a,n){"use strict";var p=n("2856"),l=n.n(p);l.a},"63b8":function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">urllib2</span>\n\n<span class="n">gh_url</span> <span class="o">=</span> <span class="s1">&#39;https://api.github.com&#39;</span>\n\n<span class="n">req</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">gh_url</span><span class="p">)</span>\n\n<span class="n">password_manager</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>\n<span class="n">password_manager</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">gh_url</span><span class="p">,</span> <span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;pass&#39;</span><span class="p">)</span>\n\n<span class="n">auth_manager</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_manager</span><span class="p">)</span>\n<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">auth_manager</span><span class="p">)</span>\n\n<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>\n\n<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>\n\n<span class="k">print</span> <span class="n">handler</span><span class="o">.</span><span class="n">getcode</span><span class="p">()</span>\n<span class="k">print</span> <span class="n">handler</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s1">&#39;content-type&#39;</span><span class="p">)</span>\n</pre></div>\n'},"7a8a":function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">s3</span><span class="p">.</span><span class="nx">createMultipartUpload</span><span class="p">({</span>\n  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n  <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n<span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">uploadId</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">UploadId</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">partNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">parts</span> <span class="o">=</span> <span class="p">[];</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="kr">const</span> <span class="nx">fixedPartNum</span> <span class="o">=</span> <span class="nx">partNumber</span><span class="p">;</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">uploadPart</span><span class="p">({</span>\n      <span class="nx">Body</span><span class="o">:</span> <span class="nx">chunk</span><span class="p">,</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">fixedPartNum</span><span class="p">,</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// todo, handle errors by</span>\n        <span class="c1">// calling abortMultipartUpload</span>\n      <span class="p">}</span>\n      <span class="nx">parts</span><span class="p">.</span><span class="nx">append</span><span class="p">({</span>\n        <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">fixedPartNum</span><span class="p">,</span>\n        <span class="nx">ETag</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">ETag</span><span class="p">,</span>\n      <span class="p">});</span>\n    <span class="p">});</span>\n    <span class="nx">partNumber</span><span class="o">++</span><span class="p">;</span>\n  <span class="p">});</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">completeMultipartUpload</span><span class="p">({</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">MultipartUpload</span><span class="o">:</span> <span class="p">{</span>\n        <span class="nx">Parts</span><span class="o">:</span> <span class="nx">parts</span><span class="p">,</span>\n      <span class="p">},</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="c1">// finally it&#39;s ended...</span>\n    <span class="p">});</span>\n  <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'},9148:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">requests</span>\n\n<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;https://api.github.com&#39;</span><span class="p">,</span> <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;pass&#39;</span><span class="p">))</span>\n\n<span class="k">print</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span>\n<span class="k">print</span> <span class="n">r</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s1">&#39;content-type&#39;</span><span class="p">]</span>\n</pre></div>\n'},"98b5":function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">s3</span><span class="p">.</span><span class="nx">createMultipartUpload</span><span class="p">({</span>\n  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n  <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n<span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">uploadId</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">UploadId</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">partNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">parts</span> <span class="o">=</span> <span class="p">[];</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">uploadPart</span><span class="p">({</span>\n      <span class="nx">Body</span><span class="o">:</span> <span class="nx">chunk</span><span class="p">,</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">partNumber</span><span class="p">,</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// todo, handle errors by</span>\n        <span class="c1">// calling abortMultipartUpload</span>\n      <span class="p">}</span>\n      <span class="nx">parts</span><span class="p">.</span><span class="nx">append</span><span class="p">({</span>\n        <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">partNumber</span><span class="p">,</span>\n        <span class="nx">ETag</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">ETag</span><span class="p">,</span>\n      <span class="p">});</span>\n    <span class="p">});</span>\n    <span class="nx">partNumber</span><span class="o">++</span><span class="p">;</span>\n  <span class="p">});</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">completeMultipartUpload</span><span class="p">({</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">MultipartUpload</span><span class="o">:</span> <span class="p">{</span>\n        <span class="nx">Parts</span><span class="o">:</span> <span class="nx">parts</span><span class="p">,</span>\n      <span class="p">},</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="c1">// finally it&#39;s ended...</span>\n    <span class="p">});</span>\n  <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'},a15a:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/upload&#39;</span><span class="p">,</span> <span class="nx">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">filename</span> <span class="o">=</span> <span class="nx">uuid</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;.mp4&#39;</span><span class="p">;</span>\n  <span class="nx">await</span> <span class="nx">s3</span><span class="p">.</span><span class="nx">putObject</span><span class="p">({</span>\n    <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n    <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n    <span class="c1">// forward the body of the request</span>\n    <span class="c1">// straight to s3</span>\n    <span class="nx">Body</span><span class="o">:</span> <span class="nx">req</span><span class="p">,</span>\n  <span class="p">});</span>\n  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">filename</span> <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'},d2b1:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/upload&#39;</span><span class="p">,</span> <span class="nx">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">filename</span> <span class="o">=</span> <span class="nx">uuid</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;.mp4&#39;</span><span class="p">;</span>\n  <span class="nx">s3</span><span class="p">.</span><span class="nx">putObject</span><span class="p">({</span>\n    <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n    <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n    <span class="c1">// forward the body of the request straight to s3</span>\n    <span class="nx">Body</span><span class="o">:</span> <span class="nx">req</span><span class="p">,</span>\n  <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">res</span><span class="p">.</span><span class="nx">sendStatus</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">filename</span> <span class="p">});</span>\n    <span class="p">}</span>\n  <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'},f1e3:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">s3</span><span class="p">.</span><span class="nx">createMultipartUpload</span><span class="p">({</span>\n  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n  <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n<span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">uploadId</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">UploadId</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">partNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">ended</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">cancelled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>\n  <span class="kr">const</span> <span class="nx">parts</span> <span class="o">=</span> <span class="p">[];</span>\n  <span class="kd">let</span> <span class="nx">chunkSoFar</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>\n  <span class="kd">function</span> <span class="nx">maybeCompleteUpload</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">ended</span> <span class="o">&amp;&amp;</span> <span class="nx">parts</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">p</span> <span class="p">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">ETag</span><span class="p">))</span> <span class="p">{</span>\n      <span class="nx">s3</span><span class="p">.</span><span class="nx">completeMultipartUpload</span><span class="p">({</span>\n          <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n          <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n          <span class="nx">MultipartUpload</span><span class="o">:</span> <span class="p">{</span>\n            <span class="nx">Parts</span><span class="o">:</span> <span class="nx">parts</span><span class="p">,</span>\n          <span class="p">},</span>\n          <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n        <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n            <span class="nx">cancelUpload</span><span class="p">();</span>\n          <span class="p">}</span>\n      <span class="p">});</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="kd">function</span> <span class="nx">cancelUpload</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nx">cancelled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">abortMultipartUpload</span><span class="p">({</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span>\n      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>\n      <span class="p">}</span>\n    <span class="p">});</span>\n  <span class="p">}</span>\n\n  <span class="kd">function</span> <span class="nx">appendPart</span><span class="p">(</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">partNumber</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// save this off, as it might have changed before</span>\n    <span class="c1">// the response from the upload</span>\n    <span class="kr">const</span> <span class="nx">part</span> <span class="o">=</span> <span class="p">{</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">partNumber</span><span class="p">,</span>\n      <span class="nx">ETag</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="c1">// not yet known</span>\n    <span class="p">};</span>\n    <span class="c1">// we must append now, as there&#39;s no guarantee</span>\n    <span class="c1">// the uploadPart responses will arrive in order.</span>\n    <span class="c1">// we&#39;ll keep a reference to &#39;part&#39; to fill in the</span>\n    <span class="c1">// ETag later.</span>\n    <span class="nx">parts</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">part</span><span class="p">);</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">uploadPart</span><span class="p">({</span>\n      <span class="nx">Body</span><span class="o">:</span> <span class="nx">payload</span><span class="p">,</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">part</span><span class="p">.</span><span class="nx">partNumber</span><span class="p">,</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">cancelUpload</span><span class="p">();</span>\n      <span class="p">}</span>\n      <span class="c1">// &#39;part&#39; is already in the array</span>\n      <span class="c1">// but we have a reference to it, so we can</span>\n      <span class="c1">// update with the ETag now that we know it.</span>\n      <span class="nx">part</span><span class="p">.</span><span class="nx">ETag</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">ETag</span><span class="p">;</span>\n      <span class="nx">maybeCompleteUpload</span><span class="p">();</span>\n    <span class="p">});</span>\n  <span class="p">}</span>\n\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">chunkSoFar</span> <span class="o">+=</span> <span class="nx">chunk</span><span class="p">;</span>\n    <span class="k">if</span> <span class="p">(</span>\n        <span class="nx">chunkSoFar</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">FIVE_MB_IN_BYTES</span> <span class="o">&amp;&amp;</span>\n        <span class="o">!</span><span class="nx">cancelled</span>\n    <span class="p">)</span> <span class="p">{</span>\n      <span class="nx">appendPart</span><span class="p">(</span><span class="nx">chunkSoFar</span><span class="p">,</span> <span class="nx">partNumber</span><span class="p">);</span>\n      <span class="nx">chunkSoFar</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>\n      <span class="nx">partNumber</span><span class="o">++</span><span class="p">;</span>\n    <span class="p">}</span>\n  <span class="p">});</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">ended</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">chunkSoFar</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">appendPart</span><span class="p">(</span><span class="nx">chunkSoFar</span><span class="p">,</span> <span class="nx">partNumber</span><span class="p">);</span>\n    <span class="p">}</span>\n    <span class="nx">maybeCompleteUpload</span><span class="p">();</span>\n  <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'}});
//# sourceMappingURL=app.f8d9dae5.js.map