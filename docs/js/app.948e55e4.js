(function(s){function a(a){for(var p,e,t=a[0],r=a[1],o=a[2],d=0,x=[];d<t.length;d++)e=t[d],l[e]&&x.push(l[e][0]),l[e]=0;for(p in r)Object.prototype.hasOwnProperty.call(r,p)&&(s[p]=r[p]);i&&i(a);while(x.length)x.shift()();return c.push.apply(c,o||[]),n()}function n(){for(var s,a=0;a<c.length;a++){for(var n=c[a],p=!0,t=1;t<n.length;t++){var r=n[t];0!==l[r]&&(p=!1)}p&&(c.splice(a--,1),s=e(e.s=n[0]))}return s}var p={},l={app:0},c=[];function e(a){if(p[a])return p[a].exports;var n=p[a]={i:a,l:!1,exports:{}};return s[a].call(n.exports,n,n.exports,e),n.l=!0,n.exports}e.m=s,e.c=p,e.d=function(s,a,n){e.o(s,a)||Object.defineProperty(s,a,{enumerable:!0,get:n})},e.r=function(s){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(s,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(s,"__esModule",{value:!0})},e.t=function(s,a){if(1&a&&(s=e(s)),8&a)return s;if(4&a&&"object"===typeof s&&s&&s.__esModule)return s;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:s}),2&a&&"string"!=typeof s)for(var p in s)e.d(n,p,function(a){return s[a]}.bind(null,p));return n},e.n=function(s){var a=s&&s.__esModule?function(){return s["default"]}:function(){return s};return e.d(a,"a",a),a},e.o=function(s,a){return Object.prototype.hasOwnProperty.call(s,a)},e.p="/joyful-apis/";var t=window["webpackJsonp"]=window["webpackJsonp"]||[],r=t.push.bind(t);t.push=a,t=t.slice();for(var o=0;o<t.length;o++)a(t[o]);var i=r;c.push([0,"chunk-vendors"]),n()})({0:function(s,a,n){s.exports=n("56d7")},"045a":function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">s3</span><span class="p">.</span><span class="nx">createMultipartUpload</span><span class="p">({</span>\n  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n  <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n<span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">uploadId</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">UploadId</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">partNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">ended</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>\n  <span class="kr">const</span> <span class="nx">parts</span> <span class="o">=</span> <span class="p">[];</span>\n  <span class="kd">let</span> <span class="nx">chunkSoFar</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>\n  <span class="kd">function</span> <span class="nx">maybeCompleteUpload</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">ended</span> <span class="o">&amp;&amp;</span> <span class="nx">parts</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">p</span> <span class="p">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">ETag</span><span class="p">))</span> <span class="p">{</span>\n      <span class="nx">s3</span><span class="p">.</span><span class="nx">completeMultipartUpload</span><span class="p">({</span>\n          <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n          <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n          <span class="nx">MultipartUpload</span><span class="o">:</span> <span class="p">{</span>\n            <span class="nx">Parts</span><span class="o">:</span> <span class="nx">parts</span><span class="p">,</span>\n          <span class="p">},</span>\n          <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n        <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="c1">// finally it&#39;s ended...</span>\n      <span class="p">});</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="kd">function</span> <span class="nx">appendPart</span><span class="p">(</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">partNumber</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// save this off, as it might have changed before</span>\n    <span class="c1">// the response from the upload</span>\n    <span class="kr">const</span> <span class="nx">part</span> <span class="o">=</span> <span class="p">{</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">partNumber</span><span class="p">,</span>\n      <span class="nx">ETag</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="c1">// not yet known</span>\n    <span class="p">};</span>\n    <span class="c1">// we must append now, as there&#39;s no guarantee</span>\n    <span class="c1">// the uploadPart responses will arrive in order.</span>\n    <span class="c1">// we&#39;ll keep a reference to &#39;part&#39; to fill in the</span>\n    <span class="c1">// ETag later.</span>\n    <span class="nx">parts</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">part</span><span class="p">);</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">uploadPart</span><span class="p">({</span>\n      <span class="nx">Body</span><span class="o">:</span> <span class="nx">payload</span><span class="p">,</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">part</span><span class="p">.</span><span class="nx">partNumber</span><span class="p">,</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// todo, handle errors by</span>\n        <span class="c1">// calling abortMultipartUpload</span>\n      <span class="p">}</span>\n      <span class="c1">// &#39;part&#39; is already in the array</span>\n      <span class="c1">// but we have a reference to it, so we can</span>\n      <span class="c1">// update with the ETag now that we know it.</span>\n      <span class="nx">part</span><span class="p">.</span><span class="nx">ETag</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">ETag</span><span class="p">;</span>\n      <span class="nx">maybeCompleteUpload</span><span class="p">();</span>\n    <span class="p">});</span>\n  <span class="p">}</span>\n\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">chunkSoFar</span> <span class="o">+=</span> <span class="nx">chunk</span><span class="p">;</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">chunkSoFar</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">FIVE_MB_IN_BYTES</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">appendPart</span><span class="p">(</span><span class="nx">chunkSoFar</span><span class="p">,</span> <span class="nx">partNumber</span><span class="p">);</span>\n      <span class="nx">chunkSoFar</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>\n      <span class="nx">partNumber</span><span class="o">++</span><span class="p">;</span>\n    <span class="p">}</span>\n  <span class="p">});</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">ended</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">chunkSoFar</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">appendPart</span><span class="p">(</span><span class="nx">chunkSoFar</span><span class="p">,</span> <span class="nx">partNumber</span><span class="p">);</span>\n    <span class="p">}</span>\n    <span class="nx">maybeCompleteUpload</span><span class="p">();</span>\n  <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'},"16ae":function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">citrus</span>\n<span class="n">p</span> <span class="o">=</span> <span class="n">citrus</span><span class="o">.</span><span class="n">Problem</span><span class="p">(</span><span class="s1">&#39;and example&#39;</span><span class="p">,</span> <span class="n">pulp</span><span class="o">.</span><span class="n">LpMinimize</span><span class="p">)</span>\n\n<span class="n">x</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">make_var</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="n">cat</span><span class="o">=</span><span class="n">pulp</span><span class="o">.</span><span class="n">LpBinary</span><span class="p">)</span>\n<span class="n">y</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">make_var</span><span class="p">(</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">cat</span><span class="o">=</span><span class="n">pulp</span><span class="o">.</span><span class="n">LpBinary</span><span class="p">)</span>\n\n<span class="n">x_and_y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="n">y</span>\n<span class="c1"># alternatively, x_and_y = citrus.logical_and(x, y)</span>\n</pre></div>\n'},"1bf6":function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">await</span> <span class="nx">s3</span><span class="p">.</span><span class="nx">putObject</span><span class="p">({</span>\n  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n  <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n  <span class="c1">// forward the body of the request</span>\n  <span class="c1">// straight to s3</span>\n  <span class="nx">Body</span><span class="o">:</span> <span class="nx">req</span><span class="p">,</span>\n<span class="p">});</span>\n</pre></div>\n'},"235b":function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">s3</span><span class="p">.</span><span class="nx">createMultipartUpload</span><span class="p">({</span>\n  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n  <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n<span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">uploadId</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">UploadId</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">partNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">ended</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>\n  <span class="kr">const</span> <span class="nx">parts</span> <span class="o">=</span> <span class="p">[];</span>\n  <span class="kd">function</span> <span class="nx">maybeEndUpload</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">ended</span> <span class="o">&amp;&amp;</span> <span class="nx">parts</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">p</span> <span class="p">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">ETag</span><span class="p">))</span> <span class="p">{</span>\n      <span class="nx">s3</span><span class="p">.</span><span class="nx">completeMultipartUpload</span><span class="p">({</span>\n          <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n          <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n          <span class="nx">MultipartUpload</span><span class="o">:</span> <span class="p">{</span>\n            <span class="nx">Parts</span><span class="o">:</span> <span class="nx">parts</span><span class="p">,</span>\n          <span class="p">},</span>\n          <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n        <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="c1">// finally it&#39;s ended...</span>\n      <span class="p">});</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="c1">// save this off, as it might have changed before</span>\n    <span class="c1">// the response from the upload</span>\n    <span class="kr">const</span> <span class="nx">part</span> <span class="o">=</span> <span class="p">{</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">partNumber</span><span class="p">,</span>\n      <span class="nx">ETag</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="c1">// not yet known</span>\n    <span class="p">};</span>\n    <span class="c1">// we must append now, as there&#39;s no guarantee</span>\n    <span class="c1">// the uploadPart responses will arrive in order.</span>\n    <span class="c1">// we&#39;ll keep a reference to &#39;part&#39; to fill in the</span>\n    <span class="c1">// ETag later.</span>\n    <span class="nx">parts</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">part</span><span class="p">);</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">uploadPart</span><span class="p">({</span>\n      <span class="nx">Body</span><span class="o">:</span> <span class="nx">chunk</span><span class="p">,</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">fixedPartNum</span><span class="p">,</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// todo, handle errors by</span>\n        <span class="c1">// calling abortMultipartUpload</span>\n      <span class="p">}</span>\n      <span class="c1">// &#39;part&#39; is already in the array</span>\n      <span class="c1">// but we have a reference to it, so we can</span>\n      <span class="c1">// update with the ETag now that we know it.</span>\n      <span class="nx">part</span><span class="p">.</span><span class="nx">ETag</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">ETag</span><span class="p">;</span>\n      <span class="nx">maybeEndUpload</span><span class="p">();</span>\n    <span class="p">});</span>\n  <span class="p">});</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">ended</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>\n    <span class="nx">maybeEndUpload</span><span class="p">();</span>\n  <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'},2856:function(s,a,n){},3666:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="n">IJwtDecoder</span> <span class="n">decoder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">JwtDecoder</span><span class="p">();</span>\n\n<span class="kt">var</span> <span class="n">json</span> <span class="p">=</span> <span class="n">decoder</span><span class="p">.</span><span class="n">Decode</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">secret</span><span class="p">);</span>\n</pre></div>\n'},3831:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">s3</span><span class="p">.</span><span class="nx">createMultipartUpload</span><span class="p">({</span>\n  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n  <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n<span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">uploadId</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">UploadId</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">partNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">parts</span> <span class="o">=</span> <span class="p">[];</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="c1">// save this off, as it might have changed before</span>\n    <span class="c1">// the response from the upload</span>\n    <span class="kr">const</span> <span class="nx">part</span> <span class="o">=</span> <span class="p">{</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">partNumber</span><span class="p">,</span>\n      <span class="nx">ETag</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="c1">// not yet known</span>\n    <span class="p">};</span>\n    <span class="c1">// we must append now, as there&#39;s no guarantee</span>\n    <span class="c1">// the uploadPart responses will arrive in order.</span>\n    <span class="c1">// we&#39;ll keep a reference to &#39;part&#39; to fill in the</span>\n    <span class="c1">// ETag later.</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">uploadPart</span><span class="p">({</span>\n      <span class="nx">Body</span><span class="o">:</span> <span class="nx">chunk</span><span class="p">,</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">fixedPartNum</span><span class="p">,</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// todo, handle errors by</span>\n        <span class="c1">// calling abortMultipartUpload</span>\n      <span class="p">}</span>\n      <span class="c1">// &#39;part&#39; is already in the array</span>\n      <span class="c1">// but we have a reference to it, so we can</span>\n      <span class="c1">// update with the ETag now that we know it.</span>\n      <span class="nx">part</span><span class="p">.</span><span class="nx">ETag</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">ETag</span><span class="p">;</span>\n    <span class="p">});</span>\n    <span class="nx">partNumber</span><span class="o">++</span><span class="p">;</span>\n  <span class="p">});</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">completeMultipartUpload</span><span class="p">({</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">MultipartUpload</span><span class="o">:</span> <span class="p">{</span>\n        <span class="nx">Parts</span><span class="o">:</span> <span class="nx">parts</span><span class="p">,</span>\n      <span class="p">},</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="c1">// finally it&#39;s ended...</span>\n    <span class="p">});</span>\n  <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'},"56d7":function(s,a,n){"use strict";n.r(a);n("cadf"),n("551c"),n("097d");var p=n("2b0e"),l=n("d973"),c=(n("b159"),n("b960")),e=n.n(c),t=n("a70e"),r=n.n(t),o=n("4dd1"),i=n.n(o),d=function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("div",{attrs:{id:"app"}},[n("div",{staticClass:"eg-slideshow"},[n("slide",[s.isParent?n("span",{staticClass:"small"},[s._v("\n        (~10 months ago, amazon s3 upload from express)\n      ")]):s._e()]),n("slide",[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.s3Idealized)}})]),n("slide",[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.s3Callback)}})]),n("slide",[n("div",{staticClass:"vertical-center smaller-04",domProps:{innerHTML:s._s(s.s3SavePartNum)}})]),n("slide",[n("div",{staticClass:"vertical-center smaller-05",domProps:{innerHTML:s._s(s.s3OrderedParts)}})]),n("slide",[n("div",{staticClass:"vertical-center smaller-06",domProps:{innerHTML:s._s(s.s3EndStream)}})]),n("slide",[n("div",{staticClass:"vertical-center smaller-07",domProps:{innerHTML:s._s(s.s3FiveMb)}})]),n("slide",[n("div",{staticClass:"vertical-center smaller-08",domProps:{innerHTML:s._s(s.s3AbortOnError)}})]),n("slide",[n("h2",[s._v("Joyful APIs")]),n("ul",{staticClass:"unbulleted center-list left-align white-card"},[n("li",{staticClass:"who-am-i"},[s._v("Brian Schiller")]),n("li",[s._v("@bgschiller")]),n("li",[s._v("brianschiller.com")])])]),n("slide",{staticClass:"title-only"},[n("p",[s._v("slides at:")]),n("h2",[s._v("brianschiller.com/joyful-apis/")])]),n("slide",{staticClass:"title-only"},[n("h2",[s._v("Orient around use, not internals")])]),n("slide",[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.pyUrllib2)}})]),n("slide",[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.pyRequests)}}),n("div",{staticClass:"credit"},[n("a",{attrs:{href:"https://gist.github.com/kennethreitz/973705"}},[s._v("\n          https://gist.github.com/kennethreitz/973705\n        ")])])]),n("slide",{staticClass:"title-only"},[n("h2",[s._v("Move complexity downard")])]),n("slide",[n("div",{staticClass:"vertical-center smaller-06",domProps:{innerHTML:s._s(s.directDomManip)}})]),n("slide",{staticClass:"vertical-center"},[n("div",{staticClass:"blockquote white-card"},[s._v("\n        Something inevitably has to put shit in the DOM.\n        "),n("div",{staticClass:"attribution"},[s._v("-David Cushman")])])]),n("slide",[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.vueReactive)}})]),n("slide",{staticClass:"title-only"},[n("h2",[s._v("Suffer for your API")])]),n("slide",[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.jwtDotnet)}}),n("div",{staticClass:"credit"},[n("a",{attrs:{href:"https://github.com/jwt-dotnet/jwt#parsing-decoding-and-verifying-token"}},[s._v("\n          https://github.com/jwt-dotnet/jwt#parsing-decoding-and-verifying-token\n        ")])])]),n("slide",{staticClass:"vertical-center"},[n("img",{attrs:{src:"/joyful-apis/images/no1curr.gif"}})]),n("slide",[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.jwtDotnetIdealized)}})]),n("slide",[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.jwtDotnetStatic)}})]),n("slide",{staticClass:"title-only"},[n("h2",[s._v("Make common things easy")])]),n("slide",[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.pulpAnd)}}),n("div",{staticClass:"credit"},[n("a",{attrs:{href:"https://github.com/bgschiller/citrus"}},[s._v("\n          https://github.com/bgschiller/citrus\n        ")])])]),n("slide",[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.citrusAnd)}})]),n("slide",{staticClass:"title-only"},[n("h2",[s._v("But what about that S3 API?")])]),n("slide",{attrs:{steps:2}},[n("div",{staticClass:"by-halves"},[n("div",{staticClass:"vertical-center",domProps:{innerHTML:s._s(s.s3IdealizedInner)}}),n("div",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=2,expression:"step >= 2"}],staticClass:"vertical-center smaller-08",domProps:{innerHTML:s._s(s.s3AbortOnError)}})])]),n("slide",{attrs:{steps:4}},[n("h2",[s._v("In Amazon's defense...")]),n("ul",{staticClass:"center-list larger white-card"},[n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=2,expression:"step>=2"}]},[s._v("fault-tolerant")]),n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=3,expression:"step>=3"}]},[s._v("parallelizable")]),n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=4,expression:"step>=4"}]},[s._v("direct map to HTTP")])])]),n("slide",{staticClass:"title-only"},[n("h2",[s._v("On the other hand...")])]),n("slide",[n("div",{staticClass:"img-contain",staticStyle:{"background-image":"url(/joyful-apis/images/i_dont_care.jpg)"}})]),n("slide",{attrs:{steps:12}},[s.step>=12?n("h2",{staticClass:"floating-header"},[s._v("\n        Joyful API Design\n      ")]):s._e(),n("div",{staticClass:"by-halves"},[n("ul",{staticClass:"left-align unbulleted white-card"},[n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=2,expression:"step >= 2"}],class:{stricken:s.step>=7}},[s._v("Organized according to how it works")]),n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=3,expression:"step >= 3"}],class:{stricken:s.step>=8}},[s._v("Left all the complexity")]),n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=4,expression:"step >= 4"}],class:{stricken:s.step>=9}},[s._v("Roll-your-own error handling")]),n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=5,expression:"step >= 5"}],class:{stricken:s.step>=10}},[s._v("A common use case requires lots of code")])]),s.step<=5?n("div",{staticClass:"vertical-center smaller-08",domProps:{innerHTML:s._s(s.s3AbortOnError)}}):s._e(),s.step>=6?n("ul",{staticClass:"left-align unbulleted white-card"},[n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=7,expression:"step >= 7"}]},[s._v("Orient around use, not internals")]),n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=8,expression:"step >= 8"}]},[s._v("Move complexity downward")]),n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=9,expression:"step >= 9"}]},[s._v("Suffer for your API")]),n("li",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=10,expression:"step >= 10"}]},[s._v("Make common things easy")])]):s._e()]),n("p",{directives:[{name:"visible",rawName:"v-visible",value:s.step>=11,expression:"step >= 11"}],staticClass:"floating-header empathy-header"},[s._v("\n        Imagine the interface you want to use, then build that\n      ")])])],1)])},x=[],u=n("a15a"),h=n.n(u),m=n("d2b1"),v=n.n(m),g=n("98b5"),b=n.n(g),f=n("7a8a"),k=n.n(f),y=n("3831"),w=n.n(y),_=n("235b"),P=n.n(_),N=n("045a"),I=n.n(N),M=n("f1e3"),U=n.n(M),C=n("1bf6"),T=n.n(C),E=n("63b8"),S=n.n(E),B=n("9148"),q=n.n(B),L=n("bb27"),j=n.n(L),D=n("e174"),H=n.n(D),O=n("9217"),A=n.n(O),K=n("3666"),z=n.n(K),F=n("c36d"),J=n.n(F),R=n("9e83"),V=n.n(R),$=n("16ae"),W=n.n($),Y={name:"app",mixins:[l["b"].slideshow],data:function(){return{s3Idealized:h.a,s3Callback:v.a,s3Multipart:b.a,s3SavePartNum:k.a,s3OrderedParts:w.a,s3EndStream:P.a,s3FiveMb:I.a,s3AbortOnError:U.a,s3IdealizedInner:T.a,pyRequests:q.a,pyUrllib2:S.a,directDomManip:j.a,vueReactive:H.a,jwtDotnet:A.a,jwtDotnetIdealized:z.a,jwtDotnetStatic:J.a,pulpAnd:V.a,citrusAnd:W.a}},methods:{updateSlides:function(){var s=this;this.currentSlideIndex=+this.$route.params.slide;var a=+this.$route.params.step;this.$nextTick(function(){s.step=a})},updateURL:function(){this.$router.push("/".concat(this.currentSlideIndex,"/").concat(this.step))}},mounted:function(){this.updateSlides()},watch:{step:"updateURL",currentSlideIndex:"updateURL"}},G=Y,Q=(n("5c0b"),n("2877")),X=Object(Q["a"])(G,d,x,!1,null,null,null);X.options.__file="App.vue";var Z=X.exports,ss=n("8c4f");p["a"].use(ss["a"]);var as=new ss["a"]({routes:[{path:"/:slide(\\d+)/:step(\\d+)",name:"permalink",component:Z},{path:"/:slide(\\d+)",redirect:function(s){return"/".concat(s.params.slide,"/1")}},{path:"*",redirect:"/1/1"}]});r.a.registerLanguage("javascript",i.a),l["a"].hljs=r.a,p["a"].config.productionTip=!1,l["b"].slideshow.computed.isChild=function(){return!!this.parentWindow},l["b"].slideshow.computed.isParent=function(){return!!this.childWindow},p["a"].use(l["b"]),p["a"].use(e.a),new p["a"]({router:as,render:function(s){return s(Z)}}).$mount("#app")},"5c0b":function(s,a,n){"use strict";var p=n("2856"),l=n.n(p);l.a},"63b8":function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">urllib2</span>\n\n<span class="n">gh_url</span> <span class="o">=</span> <span class="s1">&#39;https://api.github.com&#39;</span>\n\n<span class="n">req</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">gh_url</span><span class="p">)</span>\n\n<span class="n">password_manager</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>\n<span class="n">password_manager</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">gh_url</span><span class="p">,</span> <span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;pass&#39;</span><span class="p">)</span>\n\n<span class="n">auth_manager</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_manager</span><span class="p">)</span>\n<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">auth_manager</span><span class="p">)</span>\n\n<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>\n\n<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>\n\n<span class="k">print</span> <span class="n">handler</span><span class="o">.</span><span class="n">getcode</span><span class="p">()</span>\n<span class="k">print</span> <span class="n">handler</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s1">&#39;content-type&#39;</span><span class="p">)</span>\n</pre></div>\n'},"7a8a":function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">s3</span><span class="p">.</span><span class="nx">createMultipartUpload</span><span class="p">({</span>\n  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n  <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n<span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">uploadId</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">UploadId</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">partNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">parts</span> <span class="o">=</span> <span class="p">[];</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="kr">const</span> <span class="nx">fixedPartNum</span> <span class="o">=</span> <span class="nx">partNumber</span><span class="p">;</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">uploadPart</span><span class="p">({</span>\n      <span class="nx">Body</span><span class="o">:</span> <span class="nx">chunk</span><span class="p">,</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">fixedPartNum</span><span class="p">,</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// todo, handle errors by</span>\n        <span class="c1">// calling abortMultipartUpload</span>\n      <span class="p">}</span>\n      <span class="nx">parts</span><span class="p">.</span><span class="nx">append</span><span class="p">({</span>\n        <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">fixedPartNum</span><span class="p">,</span>\n        <span class="nx">ETag</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">ETag</span><span class="p">,</span>\n      <span class="p">});</span>\n    <span class="p">});</span>\n    <span class="nx">partNumber</span><span class="o">++</span><span class="p">;</span>\n  <span class="p">});</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">completeMultipartUpload</span><span class="p">({</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">MultipartUpload</span><span class="o">:</span> <span class="p">{</span>\n        <span class="nx">Parts</span><span class="o">:</span> <span class="nx">parts</span><span class="p">,</span>\n      <span class="p">},</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="c1">// finally it&#39;s ended...</span>\n    <span class="p">});</span>\n  <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'},9148:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">requests</span>\n\n<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;https://api.github.com&#39;</span><span class="p">,</span> <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;pass&#39;</span><span class="p">))</span>\n\n<span class="k">print</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span>\n<span class="k">print</span> <span class="n">r</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s1">&#39;content-type&#39;</span><span class="p">]</span>\n</pre></div>\n'},9217:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="n">IJsonSerializer</span> <span class="n">serializer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">JsonNetSerializer</span><span class="p">();</span>\n<span class="n">IDateTimeProvider</span> <span class="n">provider</span> <span class="p">=</span> <span class="k">new</span> <span class="n">UtcDateTimeProvider</span><span class="p">();</span>\n<span class="n">IJwtValidator</span> <span class="n">validator</span> <span class="p">=</span> <span class="k">new</span> <span class="n">JwtValidator</span><span class="p">(</span><span class="n">serializer</span><span class="p">,</span> <span class="n">provider</span><span class="p">);</span>\n<span class="n">IBase64UrlEncoder</span> <span class="n">urlEncoder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">JwtBase64UrlEncoder</span><span class="p">();</span>\n<span class="n">IJwtDecoder</span> <span class="n">decoder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">JwtDecoder</span><span class="p">(</span><span class="n">serializer</span><span class="p">,</span> <span class="n">validator</span><span class="p">,</span> <span class="n">urlEncoder</span><span class="p">);</span>\n\n<span class="kt">var</span> <span class="n">json</span> <span class="p">=</span> <span class="n">decoder</span><span class="p">.</span><span class="n">Decode</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">secret</span><span class="p">,</span> <span class="n">verify</span><span class="p">:</span> <span class="k">true</span><span class="p">);</span>\n</pre></div>\n'},"98b5":function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">s3</span><span class="p">.</span><span class="nx">createMultipartUpload</span><span class="p">({</span>\n  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n  <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n<span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">uploadId</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">UploadId</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">partNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">parts</span> <span class="o">=</span> <span class="p">[];</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">uploadPart</span><span class="p">({</span>\n      <span class="nx">Body</span><span class="o">:</span> <span class="nx">chunk</span><span class="p">,</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">partNumber</span><span class="p">,</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// todo, handle errors by</span>\n        <span class="c1">// calling abortMultipartUpload</span>\n      <span class="p">}</span>\n      <span class="nx">parts</span><span class="p">.</span><span class="nx">append</span><span class="p">({</span>\n        <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">partNumber</span><span class="p">,</span>\n        <span class="nx">ETag</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">ETag</span><span class="p">,</span>\n      <span class="p">});</span>\n    <span class="p">});</span>\n    <span class="nx">partNumber</span><span class="o">++</span><span class="p">;</span>\n  <span class="p">});</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">completeMultipartUpload</span><span class="p">({</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">MultipartUpload</span><span class="o">:</span> <span class="p">{</span>\n        <span class="nx">Parts</span><span class="o">:</span> <span class="nx">parts</span><span class="p">,</span>\n      <span class="p">},</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="c1">// finally it&#39;s ended...</span>\n    <span class="p">});</span>\n  <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'},"9e83":function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">pulp</span>\n<span class="n">p</span> <span class="o">=</span> <span class="n">pulp</span><span class="o">.</span><span class="n">LpProblem</span><span class="p">(</span><span class="s1">&#39;and example&#39;</span><span class="p">,</span> <span class="n">pulp</span><span class="o">.</span><span class="n">LpMinimize</span><span class="p">)</span>\n\n<span class="n">x</span> <span class="o">=</span> <span class="n">pulp</span><span class="o">.</span><span class="n">LpVariable</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="n">cat</span><span class="o">=</span><span class="n">pulp</span><span class="o">.</span><span class="n">LpBinary</span><span class="p">)</span>\n<span class="n">y</span> <span class="o">=</span> <span class="n">pulp</span><span class="o">.</span><span class="n">LpVariable</span><span class="p">(</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">cat</span><span class="o">=</span><span class="n">pulp</span><span class="o">.</span><span class="n">LpBinary</span><span class="p">)</span>\n<span class="n">x_and_y</span> <span class="o">=</span> <span class="n">pulp</span><span class="o">.</span><span class="n">LpVariable</span><span class="p">(</span><span class="s1">&#39;x_and_y&#39;</span><span class="p">,</span> <span class="n">cat</span><span class="o">=</span><span class="n">pulp</span><span class="o">.</span><span class="n">LpBinary</span><span class="p">)</span>\n\n<span class="c1"># Ensure that x_and_y is constrained to the logical value of &quot;x &amp;&amp; y&quot;</span>\n<span class="n">model</span><span class="o">.</span><span class="n">addConstraint</span><span class="p">(</span><span class="n">x_and_y</span> <span class="o">&gt;=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>\n<span class="n">model</span><span class="o">.</span><span class="n">addConstraint</span><span class="p">(</span><span class="n">x_and_y</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="p">)</span>\n<span class="n">model</span><span class="o">.</span><span class="n">addConstraint</span><span class="p">(</span><span class="n">x_and_y</span> <span class="o">&lt;=</span> <span class="n">y</span><span class="p">)</span>\n</pre></div>\n'},a15a:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/upload&#39;</span><span class="p">,</span> <span class="nx">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">filename</span> <span class="o">=</span> <span class="nx">uuid</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;.mp4&#39;</span><span class="p">;</span>\n  <span class="nx">await</span> <span class="nx">s3</span><span class="p">.</span><span class="nx">putObject</span><span class="p">({</span>\n    <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n    <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n    <span class="c1">// forward the body of the request</span>\n    <span class="c1">// straight to s3</span>\n    <span class="nx">Body</span><span class="o">:</span> <span class="nx">req</span><span class="p">,</span>\n  <span class="p">});</span>\n  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">filename</span> <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'},bb27:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;dog-list&quot;</span><span class="p">&gt;&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>\n\n<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>\n<span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="nx">dogs</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;Heidi&#39;</span><span class="p">,</span> <span class="s1">&#39;Mhysa&#39;</span><span class="p">,</span> <span class="s1">&#39;Daisy&#39;</span><span class="p">,</span> <span class="s1">&#39;Leia&#39;</span><span class="p">,</span> <span class="s1">&#39;Sully&#39;</span> <span class="p">],</span>\n<span class="p">};</span>\n<span class="kd">function</span> <span class="nx">render</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>\n  <span class="kd">var</span> <span class="nx">ul</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.dog-list&#39;</span><span class="p">);</span>\n  <span class="c1">// what&#39;s currently in the DOM?</span>\n  <span class="kd">var</span> <span class="nx">currentDogs</span> <span class="o">=</span> <span class="p">{};</span>\n  <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">ul</span><span class="p">.</span><span class="nx">children</span><span class="p">).</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">element</span><span class="p">,</span> <span class="nx">ix</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">currentDogs</span><span class="p">[</span><span class="nx">element</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;data-dog&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="nx">ix</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>\n  <span class="p">});</span>\n\n  <span class="c1">// re-order existing elements to match current order.</span>\n  <span class="kd">var</span> <span class="nx">currEl</span> <span class="o">=</span> <span class="nx">ul</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">;</span>\n  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">dogIx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">dogIx</span> <span class="o">&lt;</span> <span class="nx">model</span><span class="p">.</span><span class="nx">dogs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">dogIx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kr">const</span> <span class="nx">dogName</span> <span class="o">=</span> <span class="nx">model</span><span class="p">.</span><span class="nx">dogs</span><span class="p">[</span><span class="nx">dogIx</span><span class="p">];</span>\n    <span class="kr">const</span> <span class="nx">elDogName</span> <span class="o">=</span> <span class="nx">currEl</span> <span class="o">&amp;&amp;</span> <span class="nx">currEl</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;data-dog&#39;</span><span class="p">);</span>\n\n    <span class="k">if</span> <span class="p">(</span><span class="nx">elDogName</span> <span class="o">===</span> <span class="nx">dogName</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// happy path, nothing to do here!</span>\n      <span class="nx">currEl</span> <span class="o">=</span> <span class="nx">currEl</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">;</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n      <span class="kd">let</span> <span class="nx">correctNode</span><span class="p">;</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">currentDogs</span><span class="p">[</span><span class="nx">dogName</span><span class="p">])</span> <span class="p">{</span>\n        <span class="c1">// node is in the list, but in the wrong position</span>\n        <span class="nx">correctNode</span> <span class="o">=</span> <span class="nx">ul</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="sb">`[data-dog=&quot;</span><span class="si">${</span><span class="nx">dogName</span><span class="si">}</span><span class="sb">&quot;]`</span><span class="p">);</span>\n      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n        <span class="c1">// node is not in the list. create and insert it here.</span>\n        <span class="nx">correctNode</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">);</span>\n        <span class="nx">newDog</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;data-dog&#39;</span><span class="p">,</span> <span class="nx">dogName</span><span class="p">);</span>\n        <span class="nx">newDog</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">dogName</span><span class="p">;</span>\n      <span class="p">}</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">currEl</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">ul</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">correctNode</span><span class="p">,</span> <span class="nx">currEl</span><span class="p">);</span>\n        <span class="c1">// no need to update currEl, since it&#39;s already pointing</span>\n        <span class="c1">// at one node past dogIx.</span>\n      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n        <span class="nx">ul</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">correctNode</span><span class="p">);</span>\n      <span class="p">}</span>\n    <span class="p">}</span>\n    <span class="c1">// loop invariant:</span>\n    <span class="c1">// At this point, the ul matches the model up to and including dogIx.</span>\n  <span class="p">}</span>\n\n  <span class="c1">// remove any nodes that remain, as they&#39;re not part of the model</span>\n  <span class="c1">// (these are dogs no longer in our list)</span>\n  <span class="k">while</span> <span class="p">(</span><span class="nx">currEl</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kd">var</span> <span class="nx">toRemove</span> <span class="o">=</span> <span class="nx">currEl</span><span class="p">;</span>\n    <span class="nx">currEl</span> <span class="o">=</span> <span class="nx">currEl</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">;</span>\n    <span class="nx">ul</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">toRemove</span><span class="p">);</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>\n</pre></div>\n'},c36d:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="kt">var</span> <span class="n">json</span> <span class="p">=</span> <span class="n">JwtDecoder</span><span class="p">.</span><span class="n">Decode</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">secret</span><span class="p">);</span>\n</pre></div>\n'},d2b1:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/upload&#39;</span><span class="p">,</span> <span class="nx">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">filename</span> <span class="o">=</span> <span class="nx">uuid</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;.mp4&#39;</span><span class="p">;</span>\n  <span class="nx">s3</span><span class="p">.</span><span class="nx">putObject</span><span class="p">({</span>\n    <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n    <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n    <span class="c1">// forward the body of the request straight to s3</span>\n    <span class="nx">Body</span><span class="o">:</span> <span class="nx">req</span><span class="p">,</span>\n  <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">res</span><span class="p">.</span><span class="nx">sendStatus</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">filename</span> <span class="p">});</span>\n    <span class="p">}</span>\n  <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'},e174:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;dog-list&quot;</span><span class="p">&gt;</span>\n  <span class="p">&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&quot;dog in dogs&quot;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&quot;dog&quot;</span><span class="p">&gt;</span>\n    {{ dog }}\n  <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>\n<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>\n\n<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>\n<span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>\n  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;.dog-list&#39;</span><span class="p">,</span>\n  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>\n    <span class="nx">dogs</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;Heidi&#39;</span><span class="p">,</span> <span class="s1">&#39;Mhysa&#39;</span><span class="p">,</span> <span class="s1">&#39;Daisy&#39;</span><span class="p">,</span> <span class="s1">&#39;Leia&#39;</span><span class="p">,</span> <span class="s1">&#39;Sully&#39;</span> <span class="p">],</span>\n  <span class="p">},</span>\n<span class="p">})</span>\n<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>\n</pre></div>\n'},f1e3:function(s,a){s.exports='<div class="highlight"><pre><span></span><span class="nx">s3</span><span class="p">.</span><span class="nx">createMultipartUpload</span><span class="p">({</span>\n  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n  <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n<span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">uploadId</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">UploadId</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">partNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">ended</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>\n  <span class="kd">let</span> <span class="nx">cancelled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>\n  <span class="kr">const</span> <span class="nx">parts</span> <span class="o">=</span> <span class="p">[];</span>\n  <span class="kd">let</span> <span class="nx">chunkSoFar</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>\n  <span class="kd">function</span> <span class="nx">maybeCompleteUpload</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">ended</span> <span class="o">&amp;&amp;</span> <span class="nx">parts</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">p</span> <span class="p">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">ETag</span><span class="p">))</span> <span class="p">{</span>\n      <span class="nx">s3</span><span class="p">.</span><span class="nx">completeMultipartUpload</span><span class="p">({</span>\n          <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n          <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n          <span class="nx">MultipartUpload</span><span class="o">:</span> <span class="p">{</span>\n            <span class="nx">Parts</span><span class="o">:</span> <span class="nx">parts</span><span class="p">,</span>\n          <span class="p">},</span>\n          <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n        <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n            <span class="nx">cancelUpload</span><span class="p">();</span>\n          <span class="p">}</span>\n      <span class="p">});</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="kd">function</span> <span class="nx">cancelUpload</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nx">cancelled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">abortMultipartUpload</span><span class="p">({</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span>\n      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>\n      <span class="p">}</span>\n    <span class="p">});</span>\n  <span class="p">}</span>\n\n  <span class="kd">function</span> <span class="nx">appendPart</span><span class="p">(</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">partNumber</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// save this off, as it might have changed before</span>\n    <span class="c1">// the response from the upload</span>\n    <span class="kr">const</span> <span class="nx">part</span> <span class="o">=</span> <span class="p">{</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">partNumber</span><span class="p">,</span>\n      <span class="nx">ETag</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="c1">// not yet known</span>\n    <span class="p">};</span>\n    <span class="c1">// we must append now, as there&#39;s no guarantee</span>\n    <span class="c1">// the uploadPart responses will arrive in order.</span>\n    <span class="c1">// we&#39;ll keep a reference to &#39;part&#39; to fill in the</span>\n    <span class="c1">// ETag later.</span>\n    <span class="nx">parts</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">part</span><span class="p">);</span>\n    <span class="nx">s3</span><span class="p">.</span><span class="nx">uploadPart</span><span class="p">({</span>\n      <span class="nx">Body</span><span class="o">:</span> <span class="nx">payload</span><span class="p">,</span>\n      <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;better-than-youtube&#39;</span><span class="p">,</span>\n      <span class="nx">Key</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>\n      <span class="nx">PartNumber</span><span class="o">:</span> <span class="nx">part</span><span class="p">.</span><span class="nx">partNumber</span><span class="p">,</span>\n      <span class="nx">UploadId</span><span class="o">:</span> <span class="nx">uploadId</span><span class="p">,</span>\n    <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">cancelUpload</span><span class="p">();</span>\n      <span class="p">}</span>\n      <span class="c1">// &#39;part&#39; is already in the array</span>\n      <span class="c1">// but we have a reference to it, so we can</span>\n      <span class="c1">// update with the ETag now that we know it.</span>\n      <span class="nx">part</span><span class="p">.</span><span class="nx">ETag</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">ETag</span><span class="p">;</span>\n      <span class="nx">maybeCompleteUpload</span><span class="p">();</span>\n    <span class="p">});</span>\n  <span class="p">}</span>\n\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">chunkSoFar</span> <span class="o">+=</span> <span class="nx">chunk</span><span class="p">;</span>\n    <span class="k">if</span> <span class="p">(</span>\n        <span class="nx">chunkSoFar</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">FIVE_MB_IN_BYTES</span> <span class="o">&amp;&amp;</span>\n        <span class="o">!</span><span class="nx">cancelled</span>\n    <span class="p">)</span> <span class="p">{</span>\n      <span class="nx">appendPart</span><span class="p">(</span><span class="nx">chunkSoFar</span><span class="p">,</span> <span class="nx">partNumber</span><span class="p">);</span>\n      <span class="nx">chunkSoFar</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>\n      <span class="nx">partNumber</span><span class="o">++</span><span class="p">;</span>\n    <span class="p">}</span>\n  <span class="p">});</span>\n  <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">ended</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">chunkSoFar</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">appendPart</span><span class="p">(</span><span class="nx">chunkSoFar</span><span class="p">,</span> <span class="nx">partNumber</span><span class="p">);</span>\n    <span class="p">}</span>\n    <span class="nx">maybeCompleteUpload</span><span class="p">();</span>\n  <span class="p">});</span>\n<span class="p">});</span>\n</pre></div>\n'}});
//# sourceMappingURL=app.948e55e4.js.map